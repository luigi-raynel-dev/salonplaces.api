// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique

  User User[]
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  email     String?   @unique
  password  String?
  avatarUrl String?
  birthday  DateTime?
  phone     String?   @unique
  genderId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  gender       Gender?       @relation(fields: [genderId], references: [id], onDelete: Cascade)
  Staff        Staff[]
  Customer     Customer?
  Professional Professional?
  UserCode     UserCode[]
}

model Staff {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Language {
  id             Int       @id @default(autoincrement())
  title          String    @unique
  universalTitle String    @unique
  isoCode        String    @unique
  Country        Country[]
}

model Currency {
  id      Int       @id @default(autoincrement())
  title   String    @unique
  code    String    @unique
  symbol  String
  Country Country[]
}

model Country {
  id            Int    @id @default(autoincrement())
  name          String @unique
  universalName String @unique
  isoCode       String @unique
  callingCode   String @unique
  languageId    Int
  currencyId    Int

  language    Language      @relation(fields: [languageId], references: [id], onDelete: Cascade)
  currency    Currency      @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  CountryPlan CountryPlan[]
}

model Plan {
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  level              Int
  recommended        Boolean
  exclusive          Boolean
  professionalsQuota Int?
  maxProfessionals   Int?
  description        String
  multipleLocations  Boolean
  maxLocations       Int?
  daysTrial          Int?
  pixDiscount        Int
  CountryPlan        CountryPlan[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
}

model CountryPlan {
  id                       Int      @id @default(autoincrement())
  countryId                Int
  planId                   Int
  customDescription        String?
  monthlyPrice             Float
  monthlyPromotionalPrice  Float?
  quaterlyPrice            Float
  quaterlyPromotionalPrice Float?
  yearlyPrice              Float
  yearlyPromotionalPrice   Float?
  monthlyPricePerUser      Float
  quaterlyPricePerUser     Float
  yearlyPricePerUser       Float
  active                   Boolean
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now())

  country  Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  plan     Plan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  Salon    Salon[]
  Invoices Invoices[]
}

model Card {
  id              String   @id @default(cuid())
  salonId         String
  number          Int
  expirationMonth Int
  expirationYear  Int
  cvv             Int
  debit           Boolean
  selected        Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  salon    Salon      @relation(fields: [salonId], references: [id], onDelete: Cascade)
  Invoices Invoices[]
}

model Salon {
  id                  String    @id @default(cuid())
  countryPlanId       Int?
  cardIdForRecurrence String?
  name                String
  slug                String    @unique
  companyIdentifier   String?   @unique
  holderIdentifier    String?
  holder              String?
  quotaProfessionals  Int?
  description         String?   @db.LongText
  cancellationPolicy  String?
  active              Boolean   @default(false)
  percentageDiscount  Int       @default(0)
  logoUrl             String?
  phone               String?   @unique
  instagram           String?
  tiktok              String?
  facebook            String?
  block               Boolean   @default(false)
  blockReason         String?
  recurrence          Boolean   @default(false)
  planExpirationDate  DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())

  countryPlan          CountryPlan?           @relation(fields: [countryPlanId], references: [id], onDelete: Cascade)
  Card                 Card[]
  SalonMedia           SalonMedia[]
  Location             Location[]
  SalonHasProfessional SalonHasProfessional[]
  Service              Service[]
  Invoices             Invoices[]
}

model SalonMedia {
  id        Int      @id @default(autoincrement())
  url       String
  filename  String
  salonId   String
  order     Int
  createdAt DateTime @default(now())

  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@unique([salonId, order])
}

model Location {
  id                Int      @id @default(autoincrement())
  salonId           String
  name              String?
  active            Boolean
  phone             String?
  logoUrl           String?
  zipCode           String
  latitude          Int
  longitude         Int
  address           String
  number            String
  complement        String?
  referencePoint    String?
  wifi              Boolean?
  kid               Boolean?
  accessibility     Boolean?
  parking           Boolean?
  tv                Boolean?
  debitCard         Boolean?
  creditCard        Boolean?
  cash              Boolean?
  pix               Boolean?
  otherPaymentTypes String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  salon                   Salon                     @relation(fields: [salonId], references: [id], onDelete: Cascade)
  OpeningHour             OpeningHour[]
  LocationHasProfessional LocationHasProfessional[]
  LocationHasService      LocationHasService[]
  Scheduling              Scheduling[]

  @@unique([zipCode, number])
}

model OpeningHour {
  id                    Int     @id @default(autoincrement())
  locationId            Int
  sundayOpeningHours    String?
  sundayClosingHours    String?
  mondayOpeningHours    String?
  mondayClosingHours    String?
  tuesdayOpeningHours   String?
  tuesdayClosingHours   String?
  wednesdayOpeningHours String?
  wednesdayClosingHours String?
  thursdayOpeningHours  String?
  thursdayClosingHours  String?
  fridayOpeningHours    String?
  fridayClosingHours    String?
  saturdayOpeningHours  String?
  saturdayClosingHours  String?

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Customer {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Scheduling Scheduling[]
}

model Professional {
  id        String   @id @default(cuid())
  userId    Int      @unique
  bio       String?
  online    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  SalonHasProfessional    SalonHasProfessional[]
  LocationHasProfessional LocationHasProfessional[]
  ProfessionalHasService  ProfessionalHasService[]
  Scheduling              Scheduling[]
}

model SalonHasProfessional {
  salonId        String
  professionalId String
  isAdmin        Boolean
  active         Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  salon        Salon        @relation(fields: [salonId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@id([salonId, professionalId])
}

model LocationHasProfessional {
  locationId           Int
  professionalId       String
  commissionPercentage Int?

  location     Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@id([locationId, professionalId])
}

model Service {
  id               Int      @id @default(autoincrement())
  salonId          String
  title            String
  description      String?
  price            Float
  promocionalPrice Float?
  minutes          Int
  imageUrl         String?
  active           Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  salon                  Salon                    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  LocationHasService     LocationHasService[]
  ProfessionalHasService ProfessionalHasService[]
  Scheduling             Scheduling[]

  @@unique([salonId, title])
}

model LocationHasService {
  locationId       Int
  serviceId        Int
  price            Float?
  promocionalPrice Float?
  disabled         Boolean

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([locationId, serviceId])
}

model ProfessionalHasService {
  professionalId       String
  serviceId            Int
  commissionPercentage Int?
  disabled             Boolean

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([professionalId, serviceId])
}

model Scheduling {
  id              String   @id @default(uuid())
  customerId      Int
  locationId      Int
  serviceId       Int
  professionalId  String
  datetime        DateTime
  observation     String?
  canceled        Boolean
  customizedPrice Float?
  rating          Int
  ratingReason    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  location     Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Frequency {
  id       Int        @id @default(autoincrement())
  type     String     @unique
  Invoices Invoices[]
}

model Gateway {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  name      String     @unique
  active    Boolean
  Invoices  Invoices[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model PaymentType {
  id       Int        @id @default(autoincrement())
  title    String     @unique
  name     String     @unique
  active   Boolean
  Invoices Invoices[]
}

model PaymentStatus {
  id       Int        @id @default(autoincrement())
  title    String     @unique
  name     String     @unique
  active   Boolean
  Invoices Invoices[]
}

model Invoices {
  id               String    @id @default(uuid())
  salonId          String
  countryPlanId    Int
  frequencyId      Int
  paymentStatusId  Int
  paymentTypeId    Int?
  cardId           String?
  transactionId    Int?
  gatewayId        Int?
  installments     Int?
  paidAt           DateTime?
  gatewayPayload   Json?
  history          Json?
  refundReceiptUrl String?
  nfeUrl           String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())

  salon         Salon         @relation(fields: [salonId], references: [id], onDelete: Cascade)
  countryPlan   CountryPlan   @relation(fields: [countryPlanId], references: [id], onDelete: Cascade)
  frequency     Frequency     @relation(fields: [frequencyId], references: [id], onDelete: Cascade)
  paymentStatus PaymentStatus @relation(fields: [paymentStatusId], references: [id], onDelete: Cascade)
  paymentType   PaymentType?  @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade)
  card          Card?         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  gateway       Gateway?      @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
}

model CodeRequestType {
  id        String     @id @default(uuid())
  slug      String     @unique
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  UserCode  UserCode[]
}

model UserCode {
  id                String    @id @default(uuid())
  userId            Int
  codeRequestTypeId String
  code              String
  validatedIn       DateTime?
  expiresIn         DateTime
  createdAt         DateTime  @default(now())

  CodeRequestType CodeRequestType @relation(fields: [codeRequestTypeId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
}
